from hypothesis import strategies as st, given
from ciftipy.indexers import index_brainmodel_axis
from tests.helpers import get_index_length
import tests.strategies as cp_st
from nibabel.cifti2 import cifti2_axes
import numpy as np


class TestIndexBrainModelAxis:

    """.. py:class:: TestIndexBrainModelAxis
    
    This class is used for testing the functionality of the `IndexBrainModelAxis` class. It contains test cases for various methods and properties of the `IndexBrainModelAxis` class.

    Parameters
    ----------

    Returns
    -------

    """
    @given(data=st.data(), axis=cp_st.realistic_brainmodel_axis().filter(len))
    def test_data_arrs_correct_length(
        self, data: st.DataObject, axis: cifti2_axes.BrainModelAxis
    ):

        """.. py:method:: test_data_arrs_correct_length(self, data: st.DataObject, axis: cifti2_axes.BrainModelAxis)
        
        This method is a test function that checks if the data arrays generated by indexing a brain model axis have the correct length. It uses the hypothesis library to generate test data and the index_brainmodel_axis function from the ciftipy.indexers module to index the brain model axis.

        Parameters
        ----------
        data : st.DataObject
            The test data object generated by hypothesis.
        axis : cifti2_axes.BrainModelAxis
            The brain model axis to be indexed.

        Returns
        -------
        None
            None

        """
        ix = data.draw(cp_st.all_indicies((len(axis),), allow_ellipsis=False))
        length = get_index_length(ix, len(axis))
        res = index_brainmodel_axis(axis, ix)
        assert res.vertex.shape[0] == length
        assert res.name.shape[0] == length
        assert res.voxel.shape[0] == length

    @given(data=st.data(), axis=cp_st.brain_model_axes().filter(len))
    def test_voxels_plus_vertices_sum_to_correct_length(
        self, data: st.DataObject, axis: cifti2_axes.BrainModelAxis
    ):

        """.. py:method:: test_voxels_plus_vertices_sum_to_correct_length(self, data: st.DataObject, axis: cifti2_axes.BrainModelAxis)
        
        This method is a test case that checks whether the sum of the number of vertices and the number of voxels in the indexed brain model axis is equal to the expected length. It uses the hypothesis library to generate test data and the index_brainmodel_axis function to index the brain model axis.

        Parameters
        ----------
        data : st.DataObject
            The test data object generated by the hypothesis library.
        axis : cifti2_axes.BrainModelAxis
            The brain model axis to be indexed.

        Returns
        -------
        None
            None

        """
        ix = data.draw(cp_st.all_indicies((len(axis),), allow_ellipsis=False))
        length = get_index_length(ix, len(axis))
        res = index_brainmodel_axis(axis, ix)
        assert (
            np.sum(res.vertex >= 0) + np.sum(np.all(res.voxel >= 0, axis=1)) == length
        )

    @given(data=st.data(), axis=cp_st.brain_model_axes().filter(len))
    def test_voxel_and_vertex_ix_dont_intersect(
        self, data: st.DataObject, axis: cifti2_axes.BrainModelAxis
    ):

        """.. py:method:: test_voxel_and_vertex_ix_dont_intersect(self, data: st.DataObject, axis: cifti2_axes.BrainModelAxis)
        
        This method tests whether the indices of the vertex and voxel arrays in the result of the `index_brainmodel_axis` function do not intersect. It uses the `index_brainmodel_axis` function to index the `axis` object with the given indices `ix`. It then checks if the logical XOR operation between the `res.vertex` array being equal to -1 and the result of the `np.all(res.voxel == -1, axis=1)` operation is True for all elements.

        Parameters
        ----------
        data : st.DataObject
            The data object used for drawing indices.
        axis : cifti2_axes.BrainModelAxis
            The brain model axis to be indexed.

        Returns
        -------
        None
            None

        """
        ix = data.draw(cp_st.all_indicies((len(axis),), allow_ellipsis=False))
        res = index_brainmodel_axis(axis, ix)
        assert np.logical_xor(res.vertex == -1, np.all(res.voxel == -1, axis=1)).all()
